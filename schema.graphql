# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: RootQuery
    mutation: RootMutation
}

"An object with an ID"
interface Node {
    id: ID!
}

union CommentAuthorUnion = CommentAuthor | User

union MenuItemObjectUnion = Category | MenuItem | Page | Post | Stele | Tag | Text

union PostObjectUnion = MediaItem | Page | Post | Revision | Stele | Text

union TermObjectUnion = Category | Tag

"Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from."
type Avatar {
    "URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo)."
    default: String
    "HTML attributes to insert in the IMG element. Is not sanitized."
    extraAttr: String
    "Whether to always show the default image, never the Gravatar."
    forceDefault: Boolean
    "Whether the avatar was successfully found."
    foundAvatar: Boolean
    "Height of the avatar image."
    height: Int
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order."
    rating: String
    "Type of url scheme to use. Typically HTTP vs. HTTPS."
    scheme: String
    "The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image."
    size: Int
    "URL for the gravatar image source."
    url: String
    "Width of the avatar image."
    width: Int
}

"The category type"
type Category implements Node {
    "The ancestors of the object"
    ancestors: [Category]
    "The id field matches the WP_Post-&gt;ID field."
    categoryId: Int
    "Connection between the category type and the category type"
    children(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: CategoryToCategoryConnectionWhereArgs
    ): CategoryToCategoryConnection
    "The number of objects connected to the object"
    count: Int
    "The description of the object"
    description: String
    "The global ID for the category"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The parent object"
    parent: Category
    "Connection between the category type and the category type"
    posts(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: CategoryToPostConnectionWhereArgs
    ): CategoryToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The name of the taxonomy this term belongs to"
    taxonomy: Taxonomy
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
}

"Connection between the category type and the category type"
type CategoryToCategoryConnection {
    "Edges for the CategoryToCategoryConnection connection"
    edges: [CategoryToCategoryConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Category]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    taxonomyInfo: Taxonomy
}

"An edge in a connection"
type CategoryToCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category
}

"Connection between the category type and the category type"
type CategoryToPostConnection {
    "Edges for the CategoryToPostConnection connection"
    edges: [CategoryToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Post]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type CategoryToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post
}

"A Comment object"
type Comment implements Node {
    "User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL."
    agent: String
    "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
    approved: Boolean
    "The author of the comment"
    author: CommentAuthorUnion
    "IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL."
    authorIp: String
    "Connection between the Comment type and the Comment type"
    children(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: CommentToCommentConnectionWhereArgs
    ): CommentToCommentConnection
    "ID for the comment, unique among comments."
    commentId: Int
    "The object the comment was added to"
    commentedOn: PostObjectUnion
    "Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL."
    date: String
    "Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL."
    dateGmt: String
    "The globally unique identifier for the user"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL."
    karma: Int
    "Parent comment of current comment. This field is equivalent to the WP_Comment instance matching the WP_Comment-&gt;comment_parent ID."
    parent: Comment
    "Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL."
    type: String
}

"A Comment Author object"
type CommentAuthor implements Node {
    "The email for the comment author"
    email: String
    "The globally unique identifier for the Comment Author user"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The name for the comment author."
    name: String
    "The url the comment author."
    url: String
}

"Connection between the Comment type and the Comment type"
type CommentToCommentConnection {
    "Edges for the CommentToCommentConnection connection"
    edges: [CommentToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Comment]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type CommentToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment
}

"The payload for the createCategory mutation"
type CreateCategoryPayload {
    "The created category"
    category: Category
    clientMutationId: String!
}

"The payload for the createComment mutation"
type CreateCommentPayload {
    clientMutationId: String!
    "The comment that was created"
    comment: Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the createMediaItem mutation"
type CreateMediaItemPayload {
    clientMutationId: String!
    mediaItem: MediaItem
}

"The payload for the createPage mutation"
type CreatePagePayload {
    clientMutationId: String!
    page: Page
}

"The payload for the createPost mutation"
type CreatePostPayload {
    clientMutationId: String!
    post: Post
}

"The payload for the createStele mutation"
type CreateStelePayload {
    clientMutationId: String!
    stele: Stele
}

"The payload for the createTag mutation"
type CreateTagPayload {
    clientMutationId: String!
    "The created post_tag"
    tag: Tag
}

"The payload for the createText mutation"
type CreateTextPayload {
    clientMutationId: String!
    text: Text
}

"The payload for the createUser mutation"
type CreateUserPayload {
    clientMutationId: String!
    user: User
}

"The payload for the deleteCategory mutation"
type DeleteCategoryPayload {
    "The deteted term object"
    category: Category
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
}

"The payload for the deleteComment mutation"
type DeleteCommentPayload {
    clientMutationId: String!
    "The deleted comment object"
    comment: Comment
    "The deleted comment ID"
    deletedId: ID
}

"The payload for the deleteMediaItem mutation"
type DeleteMediaItemPayload {
    clientMutationId: String!
    "The ID of the deleted mediaItem"
    deletedId: ID
    "The mediaItem before it was deleted"
    mediaItem: MediaItem
}

"The payload for the deletePage mutation"
type DeletePagePayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    page: Page
}

"The payload for the deletePost mutation"
type DeletePostPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    post: Post
}

"The payload for the deleteRevision mutation"
type DeleteRevisionPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    revision: Revision
}

"The payload for the deleteStele mutation"
type DeleteStelePayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    stele: Stele
}

"The payload for the deleteTag mutation"
type DeleteTagPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The deteted term object"
    tag: Tag
}

"The payload for the deleteText mutation"
type DeleteTextPayload {
    clientMutationId: String!
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    text: Text
}

"The payload for the deleteUser mutation"
type DeleteUserPayload {
    clientMutationId: String!
    "The ID of the user that you just deleted"
    deletedId: ID
    "The deleted user object"
    user: User
}

"The discussion setting type"
type DiscussionSettings {
    "Besuchern erlauben, neue Beiträge zu kommentieren."
    defaultCommentStatus: String
    "Link-Benachrichtigungen von anderen Blogs (Pingbacks und Trackbacks) zu neuen Beiträgen erlauben"
    defaultPingStatus: String
}

"Info on whether the object is locked by another user editing it"
type EditLock {
    "The time when the object was last edited"
    editTime: String
    "The user that most recently edited the object"
    user: User
}

"The general setting type"
type GeneralSettings {
    "Ein Zeitformat für alle datumsbasierten Zeichenfolgen."
    dateFormat: String
    "Website-Untertitel."
    description: String
    "Diese Adresse wird für administrative Zwecke verwendet, wie Benachrichtigungen über neue Benutzer."
    email: String
    "WordPress-Ländercode."
    language: String
    "Die Zahl eines Wochentages, mit dem die Woche beginnen sollte."
    startOfWeek: Int
    "Ein Zeitformat für alle zeitbasierten Zeichenfolgen."
    timeFormat: String
    "Eine Stadt in Ihrer Zeitzone."
    timezone: String
    "Website-Titel."
    title: String
    "Website-URL."
    url: String
}

"File details for a Media Item"
type MediaDetails {
    "The height of the mediaItem"
    file: String
    "The height of the mediaItem"
    height: Int
    meta: MediaItemMeta
    "The available sizes of the mediaItem"
    sizes: [MediaSize]
    "The width of the mediaItem"
    width: Int
}

"The mediaItem type"
type MediaItem implements Node {
    "Alternative text to display when resource is not displayed"
    altText: String
    "Ancestors of the object"
    ancestors(
        #The types of ancestors to check for. Defaults to the same type as the current object
        types: [PostTypeEnum]
    ): [PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: User
    "The caption for the resource"
    caption(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the mediaItem type and the mediaItem type"
    comments(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: MediaItemToCommentConnectionWhereArgs
    ): MediaItemToCommentConnection
    "The content of the post."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String @deprecated(reason : "Use the description field instead of content")
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Description of the image (stored as post_content)"
    description(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String @deprecated(reason : "Use the caption field instead of excerpt")
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "Details about the mediaItem"
    mediaDetails: MediaDetails
    "The id field matches the WP_Post-&gt;ID field."
    mediaItemId: Int!
    "Url of the mediaItem"
    mediaItemUrl: String
    "Type of resource"
    mediaType: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The mime type of the mediaItem"
    mimeType: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the object. The parent object can be of various types"
    parent: PostObjectUnion
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The sizes attribute value for an image."
    sizes(
        #Size of the MediaItem to calculate sizes with
        size: MediaItemSizeEnum
    ): String
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "Url of the mediaItem"
    sourceUrl(
        #Size of the MediaItem to return
        size: MediaItemSizeEnum
    ): String
    "The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths."
    srcSet(
        #Size of the MediaItem to calculate srcSet with
        size: MediaItemSizeEnum
    ): String
    "The current status of the object"
    status: String
    "Terms connected to the mediaItem"
    termNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the mediaItem"
    termSlugs(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the mediaItem"
    terms(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [TermObjectUnion]
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String
}

"Meta connected to a MediaItem"
type MediaItemMeta {
    aperture: Float
    camera: String
    caption: String
    copyright: String
    createdTimestamp: Int
    credit: String
    focalLength: Int
    iso: Int
    keywords: [String]
    orientation: String
    shutterSpeed: Float
    title: String
}

"Connection between the mediaItem type and the mediaItem type"
type MediaItemToCommentConnection {
    "Edges for the MediaItemToCommentConnection connection"
    edges: [MediaItemToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Comment]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type MediaItemToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment
}

"Details of an available size for a media item"
type MediaSize {
    "The file of the for the referenced size"
    file: String
    "The height of the for the referenced size"
    height: String
    "The mime type of the resource"
    mimeType: String
    "The referenced size name"
    name: String
    "The url of the for the referenced size"
    sourceUrl: String
    "The width of the for the referenced size"
    width: String
}

"Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme."
type Menu {
    "The number of items in the menu"
    count: Int
    "ID of the nav menu."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "WP ID of the nav menu."
    menuId: Int
    "Connection between the Menu type and the Menu type"
    menuItems(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: MenuToMenuItemConnectionWhereArgs
    ): MenuToMenuItemConnection
    "Display name of the menu. Equivalent to WP_Term-&gt;name."
    name: String
    "The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"
    slug: String
}

"Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu."
type MenuItem {
    "Connection between the MenuItem type and the MenuItem type"
    childItems(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: MenuItemToMenuItemConnectionWhereArgs
    ): MenuItemToMenuItemConnection
    "The object connected to this menu item."
    connectedObject: MenuItemObjectUnion
    "Class attribute for the menu item link"
    cssClasses: [String]
    "Description of the menu item."
    description: String
    "Relay ID of the menu item."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Label or title of the menu item."
    label: String
    "Link relationship (XFN) of the menu item."
    linkRelationship: String
    "WP ID of the menu item."
    menuItemId: Int
    "Target attribute for the menu item link."
    target: String
    "Title attribute for the menu item link"
    title: String
    "URL or destination of the menu item."
    url: String
}

"Connection between the MenuItem type and the MenuItem type"
type MenuItemToMenuItemConnection {
    "Edges for the MenuItemToMenuItemConnection connection"
    edges: [MenuItemToMenuItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [MenuItem]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type MenuItemToMenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem
}

"Connection between the Menu type and the Menu type"
type MenuToMenuItemConnection {
    "Edges for the MenuToMenuItemConnection connection"
    edges: [MenuToMenuItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [MenuItem]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type MenuToMenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem
}

"The page type"
type Page implements Node {
    "Ancestors of the object"
    ancestors(
        #The types of ancestors to check for. Defaults to the same type as the current object
        types: [PostTypeEnum]
    ): [PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: User
    "Added to the GraphQL Schema because the ACF Field Group &quot;Bildarchiv&quot; was assigned to an individual post of the post_type: &quot;page&quot;. The group will be present in the Schema for the &quot;pages&quot; Type, but will only resolve if the entity has content saved."
    bildarchiv: Page_Bildarchiv
    "Connection between the page type and the page type"
    childPages(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PageToPageConnectionWhereArgs
    ): PageToPageConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the page type and the page type"
    comments(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PageToCommentConnectionWhereArgs
    ): PageToCommentConnection
    "The content of the post."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The featured image for the object"
    featuredImage: MediaItem
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The id field matches the WP_Post-&gt;ID field."
    pageId: Int!
    "The parent of the object. The parent object can be of various types"
    parent: PostObjectUnion
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Connection between the page type and the page type"
    revisions(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PageToRevisionConnectionWhereArgs
    ): PageToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Terms connected to the page"
    termNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the page"
    termSlugs(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the page"
    terms(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [TermObjectUnion]
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String
}

"Connection between the page type and the page type"
type PageToCommentConnection {
    "Edges for the PageToCommentConnection connection"
    edges: [PageToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Comment]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type PageToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment
}

"Connection between the page type and the page type"
type PageToPageConnection {
    "Edges for the PageToPageConnection connection"
    edges: [PageToPageConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Page]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type PageToPageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page
}

"Connection between the page type and the page type"
type PageToRevisionConnection {
    "Edges for the PageToRevisionConnection connection"
    edges: [PageToRevisionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Revision]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type PageToRevisionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Revision
}

"Field Group"
type Page_Bildarchiv {
    bilder: [MediaItem]
    fieldGroupName: String
}

"An plugin object"
type Plugin implements Node {
    "Name of the plugin author(s), may also be a company name."
    author: String
    "URI for the related author(s)/company website."
    authorUri: String
    "Description of the plugin."
    description: String
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the plugin."
    name: String
    "URI for the plugin website. This is useful for directing users for support requests etc."
    pluginUri: String
    "Current version of the plugin."
    version: String
}

"The post type"
type Post implements Node {
    "Ancestors of the object"
    ancestors(
        #The types of ancestors to check for. Defaults to the same type as the current object
        types: [PostTypeEnum]
    ): [PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: User
    "Connection between the post type and the post type"
    categories(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PostToCategoryConnectionWhereArgs
    ): PostToCategoryConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the post type and the post type"
    comments(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PostToCommentConnectionWhereArgs
    ): PostToCommentConnection
    "The content of the post."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The featured image for the object"
    featuredImage: MediaItem
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the object. The parent object can be of various types"
    parent: PostObjectUnion
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The id field matches the WP_Post-&gt;ID field."
    postId: Int!
    "Connection between the post type and the post type"
    revisions(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PostToRevisionConnectionWhereArgs
    ): PostToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Connection between the post type and the post type"
    tags(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: PostToTagConnectionWhereArgs
    ): PostToTagConnection
    "Terms connected to the post"
    termNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the post"
    termSlugs(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the post"
    terms(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [TermObjectUnion]
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String
}

"Connection between the post type and the post type"
type PostToCategoryConnection {
    "Edges for the PostToCategoryConnection connection"
    edges: [PostToCategoryConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Category]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    taxonomyInfo: Taxonomy
}

"An edge in a connection"
type PostToCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category
}

"Connection between the post type and the post type"
type PostToCommentConnection {
    "Edges for the PostToCommentConnection connection"
    edges: [PostToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Comment]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment
}

"Connection between the post type and the post type"
type PostToRevisionConnection {
    "Edges for the PostToRevisionConnection connection"
    edges: [PostToRevisionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Revision]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type PostToRevisionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Revision
}

"Connection between the post type and the post type"
type PostToTagConnection {
    "Edges for the PostToTagConnection connection"
    edges: [PostToTagConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Tag]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    taxonomyInfo: Taxonomy
}

"An edge in a connection"
type PostToTagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Tag
}

"An Post Type object"
type PostType implements Node {
    "Whether this content type should can be exported."
    canExport: Boolean
    "List of Taxonomies connected to the Post Type"
    connectedTaxonomies(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [Taxonomy]
    "A list of Taxonomies associated with the post type"
    connectedTaxonomyNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Whether delete this type of content when the author of it is deleted from the system."
    deleteWithUser: Boolean
    "Description of the content type."
    description: String
    "Whether to exclude posts with this post type from front end search results."
    excludeFromSearch: Boolean
    "The plural name of the post type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the post type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether this content type should have archives. Content archives are generated by type and by date."
    hasArchive: Boolean
    "Whether the post type is hierarchical, for example pages."
    hierarchical: Boolean
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the content type."
    label: String
    "Details about the post type labels."
    labels: PostTypeLabelDetails
    "The name of the icon file to display as a menu icon."
    menuIcon: String
    "The position of this post type in the menu. Only applies if show_in_menu is true."
    menuPosition: Int
    "The internal name of the post type. This should not be used for display purposes."
    name: String
    "Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention."
    public: Boolean
    "Whether queries can be performed on the front end for the post type as part of parse_request()."
    publiclyQueryable: Boolean
    "Name of content type to diplay in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Makes this post type available via the admin bar."
    showInAdminBar: Boolean
    "Whether to add the post type to the GraphQL Schema."
    showInGraphql: Boolean
    "Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that."
    showInMenu: Boolean
    "Makes this post type available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing this post type in the admin."
    showUi: Boolean
}

"Details for labels of the PostType"
type PostTypeLabelDetails {
    "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
    addNew: String
    "Label for adding a new singular item."
    addNewItem: String
    "Label to signify all items in a submenu link."
    allItems: String
    "Label for archives in nav menus"
    archives: String
    "Label for the attributes meta box."
    attributes: String
    "Label for editing a singular item."
    editItem: String
    "Label for the Featured Image meta box title."
    featuredImage: String
    "Label for the table views hidden heading."
    filterItemsList: String
    "Label for the media frame button."
    insertIntoItem: String
    "Label for the table hidden heading."
    itemsList: String
    "Label for the table pagination hidden heading."
    itemsListNavigation: String
    "Label for the menu name."
    menuName: String
    "General name for the post type, usually plural."
    name: String
    "Label for the new item page title."
    newItem: String
    "Label used when no items are found."
    notFound: String
    "Label used when no items are in the trash."
    notFoundInTrash: String
    "Label used to prefix parents of hierarchical items."
    parentItemColon: String
    "Label for removing the featured image."
    removeFeaturedImage: String
    "Label for searching plural items."
    searchItems: String
    "Label for setting the featured image."
    setFeaturedImage: String
    "Name for one object of this post type."
    singularName: String
    "Label for the media frame filter."
    uploadedToThisItem: String
    "Label in the media frame for using a featured image."
    useFeaturedImage: String
    "Label for viewing a singular item."
    viewItem: String
    "Label for viewing post type archives."
    viewItems: String
}

"The reading setting type"
type ReadingSettings {
    "Maximal angezeigte Beiträge."
    postsPerPage: Int
}

"The payload for the registerUser mutation"
type RegisterUserPayload {
    clientMutationId: String!
    user: User
}

"The payload for the resetUserPassword mutation"
type ResetUserPasswordPayload {
    clientMutationId: String!
    user: User
}

"The payload for the restoreComment mutation"
type RestoreCommentPayload {
    clientMutationId: String!
    "The restored comment object"
    comment: Comment
    "The ID of the restored comment"
    restoredId: ID
}

"The revision type"
type Revision implements Node {
    "Ancestors of the object"
    ancestors(
        #The types of ancestors to check for. Defaults to the same type as the current object
        types: [PostTypeEnum]
    ): [PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: User
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "The content of the post."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the object. The parent object can be of various types"
    parent: PostObjectUnion
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The id field matches the WP_Post-&gt;ID field."
    revisionId: Int!
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Terms connected to the revision"
    termNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the revision"
    termSlugs(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the revision"
    terms(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [TermObjectUnion]
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String
}

"The root mutation"
type RootMutation {
    "The payload for the createCategory mutation"
    createCategory(
        #Input for the createCategory mutation
        input: CreateCategoryInput!
    ): CreateCategoryPayload
    "The payload for the createComment mutation"
    createComment(
        #Input for the createComment mutation
        input: CreateCommentInput!
    ): CreateCommentPayload
    "The payload for the createMediaItem mutation"
    createMediaItem(
        #Input for the createMediaItem mutation
        input: CreateMediaItemInput!
    ): CreateMediaItemPayload
    "The payload for the createPage mutation"
    createPage(
        #Input for the createPage mutation
        input: CreatePageInput!
    ): CreatePagePayload
    "The payload for the createPost mutation"
    createPost(
        #Input for the createPost mutation
        input: CreatePostInput!
    ): CreatePostPayload
    "The payload for the createStele mutation"
    createStele(
        #Input for the createStele mutation
        input: CreateSteleInput!
    ): CreateStelePayload
    "The payload for the createTag mutation"
    createTag(
        #Input for the createTag mutation
        input: CreateTagInput!
    ): CreateTagPayload
    "The payload for the createText mutation"
    createText(
        #Input for the createText mutation
        input: CreateTextInput!
    ): CreateTextPayload
    "The payload for the createUser mutation"
    createUser(
        #Input for the createUser mutation
        input: CreateUserInput!
    ): CreateUserPayload
    "The payload for the deleteCategory mutation"
    deleteCategory(
        #Input for the deleteCategory mutation
        input: DeleteCategoryInput!
    ): DeleteCategoryPayload
    "The payload for the deleteComment mutation"
    deleteComment(
        #Input for the deleteComment mutation
        input: DeleteCommentInput!
    ): DeleteCommentPayload
    "The payload for the deleteMediaItem mutation"
    deleteMediaItem(
        #Input for the deleteMediaItem mutation
        input: DeleteMediaItemInput!
    ): DeleteMediaItemPayload
    "The payload for the deletePage mutation"
    deletePage(
        #Input for the deletePage mutation
        input: DeletePageInput!
    ): DeletePagePayload
    "The payload for the deletePost mutation"
    deletePost(
        #Input for the deletePost mutation
        input: DeletePostInput!
    ): DeletePostPayload
    "The payload for the deleteRevision mutation"
    deleteRevision(
        #Input for the deleteRevision mutation
        input: DeleteRevisionInput!
    ): DeleteRevisionPayload
    "The payload for the deleteStele mutation"
    deleteStele(
        #Input for the deleteStele mutation
        input: DeleteSteleInput!
    ): DeleteStelePayload
    "The payload for the deleteTag mutation"
    deleteTag(
        #Input for the deleteTag mutation
        input: DeleteTagInput!
    ): DeleteTagPayload
    "The payload for the deleteText mutation"
    deleteText(
        #Input for the deleteText mutation
        input: DeleteTextInput!
    ): DeleteTextPayload
    "The payload for the deleteUser mutation"
    deleteUser(
        #Input for the deleteUser mutation
        input: DeleteUserInput!
    ): DeleteUserPayload
    increaseCount(
        #The count to increase
        count: Int
    ): Int
    "The payload for the registerUser mutation"
    registerUser(
        #Input for the registerUser mutation
        input: RegisterUserInput!
    ): RegisterUserPayload
    "The payload for the resetUserPassword mutation"
    resetUserPassword(
        #Input for the resetUserPassword mutation
        input: ResetUserPasswordInput!
    ): ResetUserPasswordPayload
    "The payload for the restoreComment mutation"
    restoreComment(
        #Input for the restoreComment mutation
        input: RestoreCommentInput!
    ): RestoreCommentPayload
    "The payload for the sendPasswordResetEmail mutation"
    sendPasswordResetEmail(
        #Input for the sendPasswordResetEmail mutation
        input: SendPasswordResetEmailInput!
    ): SendPasswordResetEmailPayload
    "The payload for the UpdateCategory mutation"
    updateCategory(
        #Input for the UpdateCategory mutation
        input: UpdateCategoryInput!
    ): UpdateCategoryPayload
    "The payload for the updateComment mutation"
    updateComment(
        #Input for the updateComment mutation
        input: UpdateCommentInput!
    ): UpdateCommentPayload
    "The payload for the updateMediaItem mutation"
    updateMediaItem(
        #Input for the updateMediaItem mutation
        input: UpdateMediaItemInput!
    ): UpdateMediaItemPayload
    "The payload for the updatePage mutation"
    updatePage(
        #Input for the updatePage mutation
        input: UpdatePageInput!
    ): UpdatePagePayload
    "The payload for the updatePost mutation"
    updatePost(
        #Input for the updatePost mutation
        input: UpdatePostInput!
    ): UpdatePostPayload
    "The payload for the updateSettings mutation"
    updateSettings(
        #Input for the updateSettings mutation
        input: UpdateSettingsInput!
    ): UpdateSettingsPayload
    "The payload for the updateStele mutation"
    updateStele(
        #Input for the updateStele mutation
        input: UpdateSteleInput!
    ): UpdateStelePayload
    "The payload for the UpdateTag mutation"
    updateTag(
        #Input for the UpdateTag mutation
        input: UpdateTagInput!
    ): UpdateTagPayload
    "The payload for the updateText mutation"
    updateText(
        #Input for the updateText mutation
        input: UpdateTextInput!
    ): UpdateTextPayload
    "The payload for the updateUser mutation"
    updateUser(
        #Input for the updateUser mutation
        input: UpdateUserInput!
    ): UpdateUserPayload
}

"The root entry point into the Graph"
type RootQuery {
    "Entry point to get all settings for the site"
    allSettings: Settings
    "Connection between the RootQuery type and the RootQuery type"
    categories(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToCategoryConnectionWhereArgs
    ): RootQueryToCategoryConnection
    "A 0bject"
    category(id: ID!): Category
    "Returns a Comment"
    comment(id: ID!): Comment
    "Connection between the RootQuery type and the RootQuery type"
    comments(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToCommentConnectionWhereArgs
    ): RootQueryToCommentConnection
    discussionSettings: DiscussionSettings
    generalSettings: GeneralSettings
    "A 0bject"
    mediaItem(id: ID!): MediaItem
    "A mediaItem object"
    mediaItemBy(
        #Get the object by its global ID
        id: ID,
        #Get the mediaItem by its database ID
        mediaItemId: Int,
        #Get the mediaItem by its slug (only available for non-hierarchical types)
        slug: String,
        #Get the mediaItem by its uri
        uri: String
    ): MediaItem
    "Connection between the RootQuery type and the RootQuery type"
    mediaItems(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToMediaItemConnectionWhereArgs
    ): RootQueryToMediaItemConnection
    "A WordPress navigation menu"
    menu(id: ID!): Menu
    "A WordPress navigation menu item"
    menuItem(id: ID!): MenuItem
    "Connection between the RootQuery type and the RootQuery type"
    menuItems(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToMenuItemConnectionWhereArgs
    ): RootQueryToMenuItemConnection
    "Connection between the RootQuery type and the RootQuery type"
    menus(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToMenuConnectionWhereArgs
    ): RootQueryToMenuConnection
    "Fetches an object given its ID"
    node(
        #The id of the object
        id: ID
    ): Node
    "A 0bject"
    page(id: ID!): Page
    "A page object"
    pageBy(
        #Get the object by its global ID
        id: ID,
        #Get the page by its database ID
        pageId: Int,
        #Get the page by its uri
        uri: String
    ): Page
    "Connection between the RootQuery type and the RootQuery type"
    pages(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToPageConnectionWhereArgs
    ): RootQueryToPageConnection
    "A WordPress plugin"
    plugin(id: ID!): Plugin
    "Connection between the RootQuery type and the RootQuery type"
    plugins(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int
    ): RootQueryToPluginConnection
    "A 0bject"
    post(id: ID!): Post
    "A post object"
    postBy(
        #Get the object by its global ID
        id: ID,
        #Get the post by its database ID
        postId: Int,
        #Get the post by its slug (only available for non-hierarchical types)
        slug: String,
        #Get the post by its uri
        uri: String
    ): Post
    "Connection between the RootQuery type and the RootQuery type"
    posts(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToPostConnectionWhereArgs
    ): RootQueryToPostConnection
    readingSettings: ReadingSettings
    "A 0bject"
    revision(id: ID!): Revision
    "A revision object"
    revisionBy(
        #Get the object by its global ID
        id: ID,
        #Get the revision by its database ID
        revisionId: Int,
        #Get the revision by its slug (only available for non-hierarchical types)
        slug: String,
        #Get the revision by its uri
        uri: String
    ): Revision
    "Connection between the RootQuery type and the RootQuery type"
    revisions(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToRevisionConnectionWhereArgs
    ): RootQueryToRevisionConnection
    "A 0bject"
    stele(id: ID!): Stele
    "A Stele object"
    steleBy(
        #Get the object by its global ID
        id: ID,
        #Get the Stele by its slug (only available for non-hierarchical types)
        slug: String,
        #Get the Stele by its database ID
        steleId: Int,
        #Get the Stele by its uri
        uri: String
    ): Stele
    "Connection between the RootQuery type and the RootQuery type"
    stelen(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToSteleConnectionWhereArgs
    ): RootQueryToSteleConnection
    "A 0bject"
    tag(id: ID!): Tag
    "Connection between the RootQuery type and the RootQuery type"
    tags(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToTagConnectionWhereArgs
    ): RootQueryToTagConnection
    "A 0bject"
    text(id: ID!): Text
    "A Text object"
    textBy(
        #Get the object by its global ID
        id: ID,
        #Get the Text by its slug (only available for non-hierarchical types)
        slug: String,
        #Get the Text by its database ID
        textId: Int,
        #Get the Text by its uri
        uri: String
    ): Text
    "Connection between the RootQuery type and the RootQuery type"
    texte(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToTextConnectionWhereArgs
    ): RootQueryToTextConnection
    "A Theme object"
    theme(id: ID!): Theme
    "Connection between the RootQuery type and the RootQuery type"
    themes(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int
    ): RootQueryToThemeConnection
    "Returns a user"
    user(id: ID!): User
    "Returns a user role"
    userRole(id: ID!): UserRole
    "Connection between the RootQuery type and the RootQuery type"
    userRoles(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int
    ): RootQueryToUserRoleConnection
    "Connection between the RootQuery type and the RootQuery type"
    users(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: RootQueryToUserConnectionWhereArgs
    ): RootQueryToUserConnection
    "Returns the current user"
    viewer: User
    writingSettings: WritingSettings
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToCategoryConnection {
    "Edges for the RootQueryToCategoryConnection connection"
    edges: [RootQueryToCategoryConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Category]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    taxonomyInfo: Taxonomy
}

"An edge in a connection"
type RootQueryToCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToCommentConnection {
    "Edges for the RootQueryToCommentConnection connection"
    edges: [RootQueryToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Comment]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToMediaItemConnection {
    "Edges for the RootQueryToMediaItemConnection connection"
    edges: [RootQueryToMediaItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [MediaItem]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type RootQueryToMediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToMenuConnection {
    "Edges for the RootQueryToMenuConnection connection"
    edges: [RootQueryToMenuConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Menu]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToMenuConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Menu
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToMenuItemConnection {
    "Edges for the RootQueryToMenuItemConnection connection"
    edges: [RootQueryToMenuItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [MenuItem]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToMenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToPageConnection {
    "Edges for the RootQueryToPageConnection connection"
    edges: [RootQueryToPageConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Page]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type RootQueryToPageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToPluginConnection {
    "Edges for the RootQueryToPluginConnection connection"
    edges: [RootQueryToPluginConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Plugin]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToPluginConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Plugin
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToPostConnection {
    "Edges for the RootQueryToPostConnection connection"
    edges: [RootQueryToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Post]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type RootQueryToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToRevisionConnection {
    "Edges for the RootQueryToRevisionConnection connection"
    edges: [RootQueryToRevisionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Revision]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type RootQueryToRevisionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Revision
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToSteleConnection {
    "Edges for the RootQueryToSteleConnection connection"
    edges: [RootQueryToSteleConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Stele]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type RootQueryToSteleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Stele
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToTagConnection {
    "Edges for the RootQueryToTagConnection connection"
    edges: [RootQueryToTagConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Tag]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    taxonomyInfo: Taxonomy
}

"An edge in a connection"
type RootQueryToTagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Tag
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToTextConnection {
    "Edges for the RootQueryToTextConnection connection"
    edges: [RootQueryToTextConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Text]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type RootQueryToTextConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Text
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToThemeConnection {
    "Edges for the RootQueryToThemeConnection connection"
    edges: [RootQueryToThemeConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Theme]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToThemeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Theme
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToUserConnection {
    "Edges for the RootQueryToUserConnection connection"
    edges: [RootQueryToUserConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [User]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToUserConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: User
}

"Connection between the RootQuery type and the RootQuery type"
type RootQueryToUserRoleConnection {
    "Edges for the RootQueryToUserRoleConnection connection"
    edges: [RootQueryToUserRoleConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [UserRole]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToUserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: UserRole
}

"The payload for the sendPasswordResetEmail mutation"
type SendPasswordResetEmailPayload {
    clientMutationId: String!
    "The user that the password reset email was sent to"
    user: User
}

"All of the registered settings"
type Settings {
    "Besuchern erlauben, neue Beiträge zu kommentieren."
    discussionSettingsDefaultCommentStatus: String
    "Link-Benachrichtigungen von anderen Blogs (Pingbacks und Trackbacks) zu neuen Beiträgen erlauben"
    discussionSettingsDefaultPingStatus: String
    "Ein Zeitformat für alle datumsbasierten Zeichenfolgen."
    generalSettingsDateFormat: String
    "Website-Untertitel."
    generalSettingsDescription: String
    "Diese Adresse wird für administrative Zwecke verwendet, wie Benachrichtigungen über neue Benutzer."
    generalSettingsEmail: String
    "WordPress-Ländercode."
    generalSettingsLanguage: String
    "Die Zahl eines Wochentages, mit dem die Woche beginnen sollte."
    generalSettingsStartOfWeek: Int
    "Ein Zeitformat für alle zeitbasierten Zeichenfolgen."
    generalSettingsTimeFormat: String
    "Eine Stadt in Ihrer Zeitzone."
    generalSettingsTimezone: String
    "Website-Titel."
    generalSettingsTitle: String
    "Website-URL."
    generalSettingsUrl: String
    "Maximal angezeigte Beiträge."
    readingSettingsPostsPerPage: Int
    "Standard-Beitragskategorie."
    writingSettingsDefaultCategory: Int
    "Standard-Beitragsformat."
    writingSettingsDefaultPostFormat: String
    "Emoticons wie :-) und :-P als Grafiken anzeigen."
    writingSettingsUseSmilies: Boolean
}

"The Stele type"
type Stele implements Node {
    "Ancestors of the object"
    ancestors(
        #The types of ancestors to check for. Defaults to the same type as the current object
        types: [PostTypeEnum]
    ): [PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: User
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "The content of the post."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The featured image for the object"
    featuredImage: MediaItem
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the object. The parent object can be of various types"
    parent: PostObjectUnion
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The id field matches the WP_Post-&gt;ID field."
    steleId: Int!
    stele_acf: Stele_SteleAcf
    "Terms connected to the Stele"
    termNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the Stele"
    termSlugs(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the Stele"
    terms(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [TermObjectUnion]
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String
}

"Field Group"
type Stele_SteleAcf {
    fieldGroupName: String
}

"The tag type"
type Tag implements Node {
    "The number of objects connected to the object"
    count: Int
    "The description of the object"
    description: String
    "The global ID for the post_tag"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the tag type and the tag type"
    posts(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: TagToPostConnectionWhereArgs
    ): TagToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The id field matches the WP_Post-&gt;ID field."
    tagId: Int
    "The name of the taxonomy this term belongs to"
    taxonomy: Taxonomy
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
}

"Connection between the tag type and the tag type"
type TagToPostConnection {
    "Edges for the TagToPostConnection connection"
    edges: [TagToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Post]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type TagToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post
}

"A taxonomy object"
type Taxonomy implements Node {
    "A list of Post Types associated with the taxonomy"
    connectedPostTypeNames(
        #Select which post types to limit the results to
        types: [PostTypeEnum]
    ): [String]
    "List of Post Types connected to the Taxonomy"
    connectedPostTypes(
        #Select which post types to limit the results to
        types: [PostTypeEnum]
    ): [PostType]
    "Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description"
    description: String
    "The plural name of the post type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the post type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether the taxonomy is hierarchical"
    hierarchical: Boolean
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Name of the taxonomy shown in the menu. Usually plural."
    label: String
    "The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label"
    name: String
    "Whether the taxonomy is publicly queryable"
    public: Boolean
    "Name of content type to diplay in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud"
    showCloud: Boolean
    "Whether to display a column for the taxonomy on its post type listing screens."
    showInAdminColumn: Boolean
    "Whether to add the post type to the GraphQL Schema."
    showInGraphql: Boolean
    "Whether to show the taxonomy in the admin menu"
    showInMenu: Boolean
    "Whether the taxonomy is available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether to show the taxonomy in the quick/bulk edit panel."
    showInQuickEdit: Boolean
    "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing terms in this taxonomy in the admin"
    showUi: Boolean
}

"The Text type"
type Text implements Node {
    "Ancestors of the object"
    ancestors(
        #The types of ancestors to check for. Defaults to the same type as the current object
        types: [PostTypeEnum]
    ): [PostObjectUnion]
    "The author field will return a queryable User type matching the post&#039;s author."
    author: User
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "The content of the post."
    content(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "The user that most recently edited the object"
    editLast: User
    "If a user has edited the object within the past 15 seconds, this will return the user and the time they last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editLock: EditLock
    "The RSS enclosure for the object"
    enclosure: String
    "The excerpt of the post."
    excerpt(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the object. The parent object can be of various types"
    parent: PostObjectUnion
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Terms connected to the Text"
    termNames(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the Text"
    termSlugs(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [String]
    "Terms connected to the Text"
    terms(
        #Select which taxonomies to limit the results to
        taxonomies: [TaxonomyEnum]
    ): [TermObjectUnion]
    "The id field matches the WP_Post-&gt;ID field."
    textId: Int!
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        #Format of the field output
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "URI path for the resource"
    uri: String
}

"A theme object"
type Theme implements Node {
    "Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; )."
    author: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; )."
    authorUri: String
    "The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; )."
    description: String
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; )."
    name: String
    "The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot()."
    screenshot: String
    "The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet()."
    slug: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; )."
    tags: [String]
    "A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; )."
    themeUri: String
    "The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; )."
    version: Float
}

"The payload for the UpdateCategory mutation"
type UpdateCategoryPayload {
    "The created category"
    category: Category
    clientMutationId: String!
}

"The payload for the updateComment mutation"
type UpdateCommentPayload {
    clientMutationId: String!
    "The comment that was created"
    comment: Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the updateMediaItem mutation"
type UpdateMediaItemPayload {
    clientMutationId: String!
    mediaItem: MediaItem
}

"The payload for the updatePage mutation"
type UpdatePagePayload {
    clientMutationId: String!
    page: Page
}

"The payload for the updatePost mutation"
type UpdatePostPayload {
    clientMutationId: String!
    post: Post
}

"The payload for the updateSettings mutation"
type UpdateSettingsPayload {
    allSettings: Settings
    clientMutationId: String!
    discussionSettings: DiscussionSettings
    generalSettings: GeneralSettings
    readingSettings: ReadingSettings
    writingSettings: WritingSettings
}

"The payload for the updateStele mutation"
type UpdateStelePayload {
    clientMutationId: String!
    stele: Stele
}

"The payload for the UpdateTag mutation"
type UpdateTagPayload {
    clientMutationId: String!
    "The created post_tag"
    tag: Tag
}

"The payload for the updateText mutation"
type UpdateTextPayload {
    clientMutationId: String!
    text: Text
}

"The payload for the updateUser mutation"
type UpdateUserPayload {
    clientMutationId: String!
    user: User
}

"A User object"
type User implements Node {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar(
        #Whether to always show the default image, never the Gravatar. Default false
        forceDefault: Boolean,
        rating: AvatarRatingEnum,
        #The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
        size: Int
    ): Avatar
    "User metadata option name. Usually it will be &quot;wp_capabilities&quot;."
    capKey: String
    "This field is the id of the user. The id of the user matches WP_User-&gt;ID field and the value in the ID column for the &quot;users&quot; table in SQL."
    capabilities: [String]
    "Connection between the User type and the User type"
    comments(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToCommentConnectionWhereArgs
    ): UserToCommentConnection
    "Description of the user."
    description: String
    "Email of the user. This is equivalent to the WP_User-&gt;user_email property."
    email: String
    "A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps."
    extraCapabilities: [String]
    "First name of the user. This is equivalent to the WP_User-&gt;user_first_name property."
    firstName: String
    "The globally unique identifier for the user"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property."
    lastName: String
    "The preferred language locale set for the user. Value derived from get_user_locale()."
    locale: String
    "Connection between the User type and the User type"
    mediaItems(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToMediaItemConnectionWhereArgs
    ): UserToMediaItemConnection
    "Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property."
    name: String
    "The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename"
    nicename: String
    "Nickname of the user."
    nickname: String
    "Connection between the User type and the User type"
    pages(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToPageConnectionWhereArgs
    ): UserToPageConnection
    "Connection between the User type and the User type"
    posts(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToPostConnectionWhereArgs
    ): UserToPostConnection
    "The date the user registered or was created. The field follows a full ISO8601 date string format."
    registeredDate: String
    "Connection between the User type and the User type"
    revisions(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToRevisionConnectionWhereArgs
    ): UserToRevisionConnection
    "Connection between the User type and the User type"
    roles(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int
    ): UserToUserRoleConnection
    "The slug for the user. This field is equivalent to WP_User-&gt;user_nicename"
    slug: String
    "Connection between the User type and the User type"
    stelen(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToSteleConnectionWhereArgs
    ): UserToSteleConnection
    "Connection between the User type and the User type"
    texte(
        #Cursor used along with the \"first\" argument to reference where in the dataset to get data
        after: String,
        #Cursor used along with the \"last\" argument to reference where in the dataset to get data
        before: String,
        #The number of items to return after the referenced \"after\" cursor
        first: Int,
        last: Int,
        #Arguments for filtering the connection
        where: UserToTextConnectionWhereArgs
    ): UserToTextConnection
    "A website url that is associated with the user."
    url: String
    "The Id of the user. Equivalent to WP_User-&gt;ID"
    userId: Int
    "Username for the user. This field is equivalent to WP_User-&gt;user_login."
    username: String
}

"A user role object"
type UserRole {
    "The capabilities that belong to this role"
    capabilities: [String]
    "The globally unique identifier for the role"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The UI friendly name of the role"
    name: String
}

"Connection between the User type and the User type"
type UserToCommentConnection {
    "Edges for the UserToCommentConnection connection"
    edges: [UserToCommentConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Comment]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToCommentConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment
}

"Connection between the User type and the User type"
type UserToMediaItemConnection {
    "Edges for the UserToMediaItemConnection connection"
    edges: [UserToMediaItemConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [MediaItem]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type UserToMediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem
}

"Connection between the User type and the User type"
type UserToPageConnection {
    "Edges for the UserToPageConnection connection"
    edges: [UserToPageConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Page]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type UserToPageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page
}

"Connection between the User type and the User type"
type UserToPostConnection {
    "Edges for the UserToPostConnection connection"
    edges: [UserToPostConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Post]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type UserToPostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post
}

"Connection between the User type and the User type"
type UserToRevisionConnection {
    "Edges for the UserToRevisionConnection connection"
    edges: [UserToRevisionConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Revision]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type UserToRevisionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Revision
}

"Connection between the User type and the User type"
type UserToSteleConnection {
    "Edges for the UserToSteleConnection connection"
    edges: [UserToSteleConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Stele]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type UserToSteleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Stele
}

"Connection between the User type and the User type"
type UserToTextConnection {
    "Edges for the UserToTextConnection connection"
    edges: [UserToTextConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [Text]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
    "Information about the type of content being queried"
    postTypeInfo: PostType
}

"An edge in a connection"
type UserToTextConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Text
}

"Connection between the User type and the User type"
type UserToUserRoleConnection {
    "Edges for the UserToUserRoleConnection connection"
    edges: [UserToUserRoleConnectionEdge]
    "The nodes of the connection, without the edges"
    nodes: [UserRole]
    "Information about pagination in a connection."
    pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToUserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: UserRole
}

"Information about pagination in a connection."
type WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The writing setting type"
type WritingSettings {
    "Standard-Beitragskategorie."
    defaultCategory: Int
    "Standard-Beitragsformat."
    defaultPostFormat: String
    "Emoticons wie :-) und :-P als Grafiken anzeigen."
    useSmilies: Boolean
}

"What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option"
enum AvatarRatingEnum {
    G
    PG
    R
    X
}

"Options for ordering the connection"
enum CommentsConnectionOrderbyEnum {
    COMMENT_AGENT
    COMMENT_APPROVED
    COMMENT_AUTHOR
    COMMENT_AUTHOR_EMAIL
    COMMENT_AUTHOR_IP
    COMMENT_AUTHOR_URL
    COMMENT_CONTENT
    COMMENT_DATE
    COMMENT_DATE_GMT
    COMMENT_ID
    COMMENT_IN
    COMMENT_KARMA
    COMMENT_PARENT
    COMMENT_POST_ID
    COMMENT_TYPE
    USER_ID
}

"The size of the media item object."
enum MediaItemSizeEnum {
    #MediaItem with the large size
    LARGE
    #MediaItem with the medium size
    MEDIUM
    #MediaItem with the medium_large size
    MEDIUM_LARGE
    #MediaItem with the post-thumbnail size
    POST_THUMBNAIL
    #MediaItem with the thumbnail size
    THUMBNAIL
}

"The status of the media item object."
enum MediaItemStatusEnum {
    #Objects with the auto-draft status
    AUTO_DRAFT
    #Objects with the inherit status
    INHERIT
    #Objects with the private status
    PRIVATE
    #Objects with the trash status
    TRASH
}

"Registered menu locations"
enum MenuLocationEnum {
    FOOTER
    MENU_1
    SOCIAL
}

"The MimeType of the object"
enum MimeTypeEnum {
    APPLICATION_JAVA
    APPLICATION_MSWORD
    APPLICATION_OCTET_STREAM
    APPLICATION_ONENOTE
    APPLICATION_OXPS
    APPLICATION_PDF
    APPLICATION_RAR
    APPLICATION_RTF
    APPLICATION_TTAF_XML
    APPLICATION_VND_APPLE_KEYNOTE
    APPLICATION_VND_APPLE_NUMBERS
    APPLICATION_VND_APPLE_PAGES
    APPLICATION_VND_MS_ACCESS
    APPLICATION_VND_MS_EXCEL
    APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
    APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
    APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
    APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT
    APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
    APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
    APPLICATION_VND_MS_PROJECT
    APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
    APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
    APPLICATION_VND_MS_WRITE
    APPLICATION_VND_MS_XPSDOCUMENT
    APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
    APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
    APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
    APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
    APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
    APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
    APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
    APPLICATION_WORDPERFECT
    APPLICATION_X_7Z_COMPRESSED
    APPLICATION_X_GZIP
    APPLICATION_X_TAR
    APPLICATION_ZIP
    AUDIO_AAC
    AUDIO_FLAC
    AUDIO_MIDI
    AUDIO_MPEG
    AUDIO_OGG
    AUDIO_WAV
    AUDIO_X_MATROSKA
    AUDIO_X_MS_WAX
    AUDIO_X_MS_WMA
    AUDIO_X_REALAUDIO
    IMAGE_BMP
    IMAGE_GIF
    IMAGE_JPEG
    IMAGE_PNG
    IMAGE_TIFF
    IMAGE_X_ICON
    TEXT_CALENDAR
    TEXT_CSS
    TEXT_CSV
    TEXT_PLAIN
    TEXT_RICHTEXT
    TEXT_TAB_SEPARATED_VALUES
    TEXT_VTT
    VIDEO_3GPP
    VIDEO_3GPP2
    VIDEO_AVI
    VIDEO_DIVX
    VIDEO_MP4
    VIDEO_MPEG
    VIDEO_OGG
    VIDEO_QUICKTIME
    VIDEO_WEBM
    VIDEO_X_FLV
    VIDEO_X_MATROSKA
    VIDEO_X_MS_ASF
    VIDEO_X_MS_WM
    VIDEO_X_MS_WMV
    VIDEO_X_MS_WMX
}

"The cardinality of the connection order"
enum OrderEnum {
    ASC
    DESC
}

"The format of post field data."
enum PostObjectFieldFormatEnum {
    #Provide the field value directly from database
    RAW
    #Apply the default WordPress rendering
    RENDERED
}

"The column to use when filtering by date"
enum PostObjectsConnectionDateColumnEnum {
    DATE
    MODIFIED
}

"Field to order the connection by"
enum PostObjectsConnectionOrderbyEnum {
    #Order by author
    AUTHOR
    #Order by publish date
    DATE
    #Preserve the ID order given in the IN array
    IN
    #Order by the menu order value
    MENU_ORDER
    #Order by last modified date
    MODIFIED
    #Preserve slug order given in the NAME_IN array
    NAME_IN
    #Order by parent ID
    PARENT
    #Order by slug
    SLUG
    #Order by title
    TITLE
}

"The status of the object."
enum PostStatusEnum {
    #Objects with the acf-disabled status
    ACF_DISABLED
    #Objects with the auto-draft status
    AUTO_DRAFT
    #Objects with the draft status
    DRAFT
    #Objects with the future status
    FUTURE
    #Objects with the inherit status
    INHERIT
    #Objects with the pending status
    PENDING
    #Objects with the private status
    PRIVATE
    #Objects with the publish status
    PUBLISH
    #Objects with the request-completed status
    REQUEST_COMPLETED
    #Objects with the request-confirmed status
    REQUEST_CONFIRMED
    #Objects with the request-failed status
    REQUEST_FAILED
    #Objects with the request-pending status
    REQUEST_PENDING
    #Objects with the trash status
    TRASH
}

"Allowed Post Types"
enum PostTypeEnum {
    ATTACHMENT
    PAGE
    POST
    REVISION
    STELE
    TEXTE
}

"The logical relation between each item in the array when there are more than one."
enum RelationEnum {
    AND
    OR
}

"Allowed taxonomies"
enum TaxonomyEnum {
    CATEGORY
    TAG
}

"Options for ordering the connection by"
enum TermObjectsConnectionOrderbyEnum {
    COUNT
    DESCRIPTION
    NAME
    SLUG
    TERM_GROUP
    TERM_ID
    TERM_ORDER
}

"Names of available user roles"
enum UserRoleEnum {
    ADMINISTRATOR
    AUTHOR
    CONTRIBUTOR
    EDITOR
    SUBSCRIBER
}

"Field to order the connection by"
enum UsersConnectionOrderbyEnum {
    #Order by display name
    DISPLAY_NAME
    #Order by email address
    EMAIL
    #Order by login
    LOGIN
    #Preserve the login order given in the LOGIN_IN array
    LOGIN_IN
    #Order by nice name
    NICE_NAME
    #Preserve the nice name order given in the NICE_NAME_IN array
    NICE_NAME_IN
    #Order by registration date
    REGISTERED
    #Order by URL
    URL
}

"Arguments for filtering the CategoryToCategoryConnection connection"
input CategoryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToPostConnection connection"
input CategoryToPostConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the CommentToCommentConnection connection"
input CommentToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """
    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """
    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """
    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """
    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """
    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [PostTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """
    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Input for the createCategory mutation"
input CreateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the category object"
    description: String
    "The name of the category object to mutate"
    name: String!
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createComment mutation"
input CreateCommentInput {
    "User agent used to post the comment."
    agent: String
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "IP address for the comment's author."
    authorIp: String
    "The url of the comment's author."
    authorUrl: String
    clientMutationId: String!
    "The ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "Parent comment of current comment."
    parent: ID
    "Type of comment."
    type: String
    "The userID of the comment's author."
    userId: Int
}

"Input for the createMediaItem mutation"
input CreateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    clientMutationId: String!
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: MimeTypeEnum
    "The WordPress post ID or the graphQL postId of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the createPage mutation"
input CreatePageInput {
    "The userId to assign as the author of the post"
    authorId: ID
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createPost mutation"
input CreatePostInput {
    "The userId to assign as the author of the post"
    authorId: ID
    "Set connections between the post and categories"
    categories: PostCategoriesInput
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the post and tags"
    tags: PostTagsInput
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createStele mutation"
input CreateSteleInput {
    "The userId to assign as the author of the post"
    authorId: ID
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createTag mutation"
input CreateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the post_tag object"
    description: String
    "The name of the post_tag object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createText mutation"
input CreateTextInput {
    "The userId to assign as the author of the post"
    authorId: ID
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createUser mutation"
input CreateUserInput {
    "User's AOL IM account."
    aim: String
    clientMutationId: String!
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string that contains the user's username for logging in."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Date values"
input DateInput {
    "Day of the month (from 1 to 31)"
    day: Int
    "Month number (from 1 to 12)"
    month: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Filter the connection based on input"
input DateQueryInput {
    after: DateInput
    before: DateInput
    "Column to query against"
    column: PostObjectsConnectionDateColumnEnum
    "For after/before, whether exact value should be matched or not"
    compare: String
    "Day of the month (from 1 to 31)"
    day: Int
    "Hour (from 0 to 23)"
    hour: Int
    "For after/before, whether exact value should be matched or not"
    inclusive: Boolean
    "Minute (from 0 to 59)"
    minute: Int
    "Month number (from 1 to 12)"
    month: Int
    "OR or AND, how the sub-arrays should be compared"
    relation: RelationEnum
    "Second (0 to 59)"
    second: Int
    "Week of the year (from 0 to 53)"
    week: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Input for the deleteCategory mutation"
input DeleteCategoryInput {
    clientMutationId: String!
    "The ID of the category to delete"
    id: ID!
}

"Input for the deleteComment mutation"
input DeleteCommentInput {
    clientMutationId: String!
    "Whether the comment should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The deleted comment ID"
    id: ID!
}

"Input for the deleteMediaItem mutation"
input DeleteMediaItemInput {
    clientMutationId: String!
    "Whether the mediaItem should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the mediaItem to delete"
    id: ID!
}

"Input for the deletePage mutation"
input DeletePageInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the page to delete"
    id: ID!
}

"Input for the deletePost mutation"
input DeletePostInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the post to delete"
    id: ID!
}

"Input for the deleteRevision mutation"
input DeleteRevisionInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the revision to delete"
    id: ID!
}

"Input for the deleteStele mutation"
input DeleteSteleInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the Stele to delete"
    id: ID!
}

"Input for the deleteTag mutation"
input DeleteTagInput {
    clientMutationId: String!
    "The ID of the tag to delete"
    id: ID!
}

"Input for the deleteText mutation"
input DeleteTextInput {
    clientMutationId: String!
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the Text to delete"
    id: ID!
}

"Input for the deleteUser mutation"
input DeleteUserInput {
    clientMutationId: String!
    "The ID of the user you want to delete"
    id: ID!
    "Reassign posts and links to new User ID."
    reassignId: ID
}

"Arguments for filtering the MediaItemToCommentConnection connection"
input MediaItemToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """
    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """
    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """
    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """
    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """
    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [PostTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """
    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the MenuItemToMenuItemConnection connection"
input MenuItemToMenuItemConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
}

"Arguments for filtering the MenuToMenuItemConnection connection"
input MenuToMenuItemConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
}

"Arguments for filtering the PageToCommentConnection connection"
input PageToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """
    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """
    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """
    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """
    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """
    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [PostTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """
    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PageToPageConnection connection"
input PageToPageConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the PageToRevisionConnection connection"
input PageToRevisionConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Set relationships between the post to categories"
input PostCategoriesInput {
    "If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true."
    append: Boolean
    nodes: [PostCategoriesNodeInput]
}

"List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostCategoriesNodeInput {
    "The description of the category. This field is used to set a description of the category if a new one is created during the mutation."
    description: String
    "The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made."
    id: ID
    "The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Options for ordering the connection"
input PostObjectsConnectionOrderbyInput {
    field: PostObjectsConnectionOrderbyEnum!
    order: OrderEnum
}

"Set relationships between the post to tags"
input PostTagsInput {
    "If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true."
    append: Boolean
    nodes: [PostTagsNodeInput]
}

"List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostTagsNodeInput {
    "The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation."
    description: String
    "The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made."
    id: ID
    "The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostToCategoryConnection connection"
input PostToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToCommentConnection connection"
input PostToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """
    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """
    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """
    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """
    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """
    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [PostTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """
    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PostToRevisionConnection connection"
input PostToRevisionConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the PostToTagConnection connection"
input PostToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Input for the registerUser mutation"
input RegisterUserInput {
    "User's AOL IM account."
    aim: String
    clientMutationId: String!
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "A string that contains the user's username."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the resetUserPassword mutation"
input ResetUserPasswordInput {
    clientMutationId: String!
    "Password reset key"
    key: String
    "The user's login (username)."
    login: String
    "The new password."
    password: String
}

"Input for the restoreComment mutation"
input RestoreCommentInput {
    clientMutationId: String!
    "The ID of the comment to be restored"
    id: ID!
}

"Arguments for filtering the RootQueryToCategoryConnection connection"
input RootQueryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToCommentConnection connection"
input RootQueryToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """
    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """
    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """
    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """
    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """
    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [PostTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """
    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the RootQueryToMediaItemConnection connection"
input RootQueryToMediaItemConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToMenuConnection connection"
input RootQueryToMenuConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The slug of the menu to query items for"
    slug: String
}

"Arguments for filtering the RootQueryToMenuItemConnection connection"
input RootQueryToMenuItemConnectionWhereArgs {
    "The ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
}

"Arguments for filtering the RootQueryToPageConnection connection"
input RootQueryToPageConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPostConnection connection"
input RootQueryToPostConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToRevisionConnection connection"
input RootQueryToRevisionConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToSteleConnection connection"
input RootQueryToSteleConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToTagConnection connection"
input RootQueryToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Default false. If true, only the items connected to the source item will be returned. If false, all items will be returned regardless of connection to the source"
    shouldOnlyIncludeConnectedItems: Boolean
    "Default false. If true, the connection will be output in a flat list instead of the hierarchical list. So child terms will be output in the same level as the parent terms"
    shouldOutputInFlatList: Boolean
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTextConnection connection"
input RootQueryToTextConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToUserConnection connection"
input RootQueryToUserConnectionWhereArgs {
    "Array of userIds to exclude."
    exclude: [Int]
    "Pass an array of post types to filter results to users who have published posts in those post types."
    hasPublishedPosts: [PostTypeEnum]
    "Array of userIds to include."
    include: [Int]
    "The user login."
    login: String
    "An array of logins to include. Users matching one of these logins will be included in results."
    loginIn: Int
    "An array of logins to exclude. Users matching one of these logins will not be included in results."
    loginNotIn: Int
    "The user nicename."
    nicename: String
    "An array of nicenames to include. Users matching one of these nicenames will be included in results."
    nicenameIn: [String]
    "An array of nicenames to exclude. Users matching one of these nicenames will not be included in results."
    nicenameNotIn: [String]
    "What paramater to use to order the objects by."
    orderby: [UsersConnectionOrderbyInput]
    "An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role."
    role: UserRoleEnum
    "An array of role names. Matched users must have at least one of these roles."
    roleIn: [UserRoleEnum]
    "An array of role names to exclude. Users matching one or more of these roles will not be included in results."
    roleNotIn: [UserRoleEnum]
    "Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string."
    search: String
    "Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'."
    searchColumns: [String]
}

"Input for the sendPasswordResetEmail mutation"
input SendPasswordResetEmailInput {
    clientMutationId: String!
    "A string that contains the user's username or email address."
    username: String!
}

"Arguments for filtering the TagToPostConnection connection"
input TagToPostConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Input for the UpdateCategory mutation"
input UpdateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the category object"
    description: String
    "The ID of the category object to update"
    id: ID!
    "The name of the category object to mutate"
    name: String
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateComment mutation"
input UpdateCommentInput {
    "User agent used to post the comment."
    agent: String
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "IP address for the comment's author."
    authorIp: String
    "The url of the comment's author."
    authorUrl: String
    clientMutationId: String!
    "The ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the comment being updated."
    id: ID!
    "Parent comment of current comment."
    parent: ID
    "Type of comment."
    type: String
    "The userID of the comment's author."
    userId: Int
}

"Input for the updateMediaItem mutation"
input UpdateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    clientMutationId: String!
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: MimeTypeEnum
    "The ID of the mediaItem object"
    id: ID!
    "The WordPress post ID or the graphQL postId of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the updatePage mutation"
input UpdatePageInput {
    "The userId to assign as the author of the post"
    authorId: ID
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the page object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the updatePost mutation"
input UpdatePostInput {
    "The userId to assign as the author of the post"
    authorId: ID
    "Set connections between the post and categories"
    categories: PostCategoriesInput
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the post object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the post and tags"
    tags: PostTagsInput
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the updateSettings mutation"
input UpdateSettingsInput {
    clientMutationId: String!
    "Besuchern erlauben, neue Beiträge zu kommentieren."
    discussionSettingsDefaultCommentStatus: String
    "Link-Benachrichtigungen von anderen Blogs (Pingbacks und Trackbacks) zu neuen Beiträgen erlauben"
    discussionSettingsDefaultPingStatus: String
    "Ein Zeitformat für alle datumsbasierten Zeichenfolgen."
    generalSettingsDateFormat: String
    "Website-Untertitel."
    generalSettingsDescription: String
    "Diese Adresse wird für administrative Zwecke verwendet, wie Benachrichtigungen über neue Benutzer."
    generalSettingsEmail: String
    "WordPress-Ländercode."
    generalSettingsLanguage: String
    "Die Zahl eines Wochentages, mit dem die Woche beginnen sollte."
    generalSettingsStartOfWeek: Int
    "Ein Zeitformat für alle zeitbasierten Zeichenfolgen."
    generalSettingsTimeFormat: String
    "Eine Stadt in Ihrer Zeitzone."
    generalSettingsTimezone: String
    "Website-Titel."
    generalSettingsTitle: String
    "Website-URL."
    generalSettingsUrl: String
    "Maximal angezeigte Beiträge."
    readingSettingsPostsPerPage: Int
    "Standard-Beitragskategorie."
    writingSettingsDefaultCategory: Int
    "Standard-Beitragsformat."
    writingSettingsDefaultPostFormat: String
    "Emoticons wie :-) und :-P als Grafiken anzeigen."
    writingSettingsUseSmilies: Boolean
}

"Input for the updateStele mutation"
input UpdateSteleInput {
    "The userId to assign as the author of the post"
    authorId: ID
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the Stele object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the UpdateTag mutation"
input UpdateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    clientMutationId: String!
    "The description of the post_tag object"
    description: String
    "The ID of the tag object to update"
    id: ID!
    "The name of the post_tag object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateText mutation"
input UpdateTextInput {
    "The userId to assign as the author of the post"
    authorId: ID
    clientMutationId: String!
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the Text object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "If the post is an attachment or a media file, this field will carry the corresponding MIME type. This field is equivalent to the value of WP_Post->post_mime_type and the post_mime_type column in the \"post_objects\" database table."
    mimeType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the post"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the updateUser mutation"
input UpdateUserInput {
    "User's AOL IM account."
    aim: String
    clientMutationId: String!
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "The ID of the user"
    id: ID!
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Arguments for filtering the UserToCommentConnection connection"
input UserToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    """
    Array of IDs of users whose unapproved comments will be returned by the
    \t\t\t\t\t\t\tquery regardless of status.
    """
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    """
    Limit results to those affiliated with a given content object
    \t\t\t\t\t\t\tID.
    """
    contentId: ID
    """
    Array of content object IDs to include affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdIn: [ID]
    """
    Array of content object IDs to exclude affiliated comments
    \t\t\t\t\t\t\tfor.
    """
    contentIdNotIn: [ID]
    "Content object name to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    """
    Array of content object statuses to retrieve affiliated comments for.
    \t\t\t\t\t\t\tPass 'any' to match any value.
    """
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [PostTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    """
    Array of parent IDs of comments *not* to retrieve children
    \t\t\t\t\t\t\tfor.
    """
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the UserToMediaItemConnection connection"
input UserToMediaItemConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPageConnection connection"
input UserToPageConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPostConnection connection"
input UserToPostConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToRevisionConnection connection"
input UserToRevisionConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToSteleConnection connection"
input UserToSteleConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToTextConnection connection"
input UserToTextConnectionWhereArgs {
    """
    The user that's connected as the author of the object. Use the
    \t\t\t\t\t\t\tuserId for the author object.
    """
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    """
    Find objects NOT connected to author(s) in the array of author's
    \t\t\t\t\t\t\tuserIds
    """
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    """
    Array of category IDs, used to display objects from one
    \t\t\t\t\t\t\t\t\t\tcategory OR another
    """
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    """
    True for objects with passwords; False for objects without passwords;
    \t\t\t\t\t\t\tnull for all objects with or without passwords
    """
    hasPassword: Boolean
    "Specific ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    """
    Specify IDs NOT to retrieve. If this is used in the same query as \"in\",
    \t\t\t\t\t\t\tit will be ignored
    """
    notIn: [ID]
    "What paramater to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    """
    Use ID to return only children. Use 0 to return only top-level
    \t\t\t\t\t\t\titems
    """
    parent: String
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    stati: [PostStatusEnum]
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagIn: [ID]
    """
    Array of tag IDs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagNotIn: [ID]
    """
    Array of tag slugs, used to display objects from one tag OR
    \t\t\t\t\t\t\tanother
    """
    tagSlugAnd: [String]
    """
    Array of tag slugs, used to exclude objects in specified
    \t\t\t\t\t\t\ttags
    """
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input UsersConnectionOrderbyInput {
    field: UsersConnectionOrderbyEnum!
    order: OrderEnum
}
